initializeSectionSummarizer();

function initializeSectionSummarizer() {
    const summarizerSections = getSections();
    window.summarizerSections = summarizerSections;
    if (summarizerSections.length === 0) {
        console.error('Section Summarizer could not find suitable sections');
    } else {
        injectSummaryWidgets(summarizerSections, 2000);
    }
}

function injectSummaryWidgets(sections, minChars = 500) {
    sections.forEach(function (section, index) {
        if (section.contentPlainLength > minChars) {
            const widget = document.createElement('div');
            widget.className = 'section-summary-widget collapsed';

            widget.innerHTML = [
                '<div class="section-summary-widget__collapsed">',
                '    <button>Summarize</button>',
                '</div>',
                '<div class="section-summary-widget__loading">',
                '    <div>Summarizing the section...</div>',
                '</div>',
                '<div class="section-summary-widget__completed">',
                '    <div class="section-summary-widget__summary"></div>',
                '    <div class="section-summary-widget__disclaimer">',
                '        This summary was generated by AI and can contain errors.',
                '    </div>',
                '</div>',
                '<div class="section-summary-widget__error"></div>'
            ].join('');

            section.firstContentElement.parentNode.insertBefore(widget, section.firstContentElement);

            const collapsedLink = widget.querySelector('.section-summary-widget__collapsed button');
            collapsedLink.addEventListener('click', function (event) {
                event.preventDefault();
                widget.classList.remove('collapsed');
                widget.classList.add('loading');

                summarizeSection(section).then(function (summary) {
                    var summaryDiv = widget.querySelector('.section-summary-widget__summary');
                    summaryDiv.textContent = summary;
                    widget.classList.remove('loading');
                    widget.classList.add('completed');
                }).catch(function (error) {
                    var errorDiv = widget.querySelector('.section-summary-widget__error');
                    errorDiv.textContent = 'Error: ' + error;
                    widget.classList.remove('loading');
                    widget.classList.add('error');
                });
            });
        }
    });
}

function summarizeSection(section) {
    return new Promise(function (resolve, reject) {
        const openAiKey = getOpenAiKey();
        if (!openAiKey) {
            reject('OpenAI API key not found or invalid');
            return;
        }

        const sectionContent = "## " + section.title + "\n\n" + section.contentPlain;

        fetchSummaryUsingOpenAPI(openAiKey, sectionContent, function (error, summary) {
            if (error) {
                reject(error);
            } else {
                resolve(summary);
            }
        });
    });
}


function fetchSummaryUsingOpenAPI(openAPIKey, sectionText, callback) {
    const fixedPromptForChatGPT = "Summarize the following section in 30 words: \n\n";
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "https://api.openai.com/v1/chat/completions", true);
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.setRequestHeader("Authorization", "Bearer " + openAPIKey);
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                const responseContent = response.choices[0].message.content;
                callback(null, responseContent);
            } else {
                callback(xhr.statusText);
            }
        }
    };
    xhr.send(JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
            {
                role: "user",
                content: fixedPromptForChatGPT + sectionText,
            }
        ],
        temperature: 0
    }));
}

function getOpenAiKey() {
    var openAiKey = localStorage.getItem('openAiKey');

    if (!openAiKey) {
        var userInput = prompt('Please enter your OpenAI API key (it should start with "sk-"):');

        if (userInput && userInput.startsWith('sk-')) {
            openAiKey = userInput;
            localStorage.setItem('openAiKey', openAiKey);
        } else {
            console.error('Invalid OpenAI API key provided.');
            return null;
        }
    }

    return openAiKey;
}
